openapi: 3.1.0

info:
  title: Social Network
  description: Api for social network
  version: 1.0.0

tags:
  - name: Auth
    description: access to social network

  - name: Verification
    description: social network verification

  - name: Bookmarks
    description: create and delete bookmarks

  - name: Conversations
    description: create and delete conversations

  - name: Files
    description: upload and delete files

  - name: Friends
    description: manage your friends

  - name: Posts
    description: create, read, update and delete posts

  - name: Profile
    description: profile settings

  - name: Session tokens
    description: manage your's session tokens

  - name: Subscriptions
    description: user subscriptions

  - name: Users
    description: users data

  - name: Test
    description: test if server works

paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/forms/login'

      responses:
        '200':
          description: Receive access token and user data
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/user_and_profile'
        '400':
          description: Invalid fields
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      error:
                        type: string
                        example: Password is required
        '401':
          description: Forbidden to login
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      statusCode:
                        type: number
                        example: 401
                      error:
                        type: string
                        example: No user with this email

  /auth/signup:
    post:
      tags:
        - Auth
      summary: signup user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/forms/signup'

      responses:
        '200':
          description: Access token and user data
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      message:
                        type: text
                        example: Congratulations, your account has been
                          successfully created. Please, check your email.
                          We sent an verification on joshhaley@hotmail.com
        '400':
          description: No request body
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      error:
                        type: string
                        example: Passwords don't match
        '409':
          description: Can't sing up
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      statusCode:
                        type: number
                        example: 409
                      error:
                        type: string
                        example: Email is already taken

  /auth/logout:
    get:
      tags:
        - Auth
      security:
        - bearerToken: []
      summary: logout user
      responses:
        '200':
          description: remove refresh token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      message:
                        type: text
                        example: Logout successfully

  /auth/verify-refresh:
    get:
      tags:
        - Auth
      summary: verify refresh token

      responses:
        '200':
          description: token was verified and a new pair of tokens was given
          headers:
            Set-Cookie:
              schema:
                type: string
                example: refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
                  eyJpZCI6MSwiZW1haWwiOiJkZW5pc0BnbWFpbC5jb20iLCJyb2xlIjoidXNlciIsImlhdCI6MTcxNzY2MjE2MywiZXhwIjoxNzIwMjU0MTYzfQ.
                  QYQbbxf_oFn1yQz7wTWGawNUldebjUONhMKIIw9MQes; HttpOnly
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
                          eyJpZCI6MSwiZW1haWwiOiJkZW5pc0BnbWFpbC5jb20iLCJyb2xlIjoidXNlciIsImlhdCI6MTcxNzY2MjE2MywiZXhwIjoxNzE3NjYzMDYzfQ.
                          CD7ExOJ9KMDRI11sjOPrRNBfOz6KTuTM876JfJwweXc
                      message:
                        type: text
                        example: You have received a new pair of tokens! üçêüçè
        '401':
          description: invalid or no token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      statusCode:
                        type: number
                        example: 401
                      error:
                        type: string
                        example: No refresh token

  /auth/forgot-password:
    post:
      tags:
        - Auth
      summary: create forgot password verification
      responses:
        '200':
          description:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: object
                        example: null
                      message:
                        type: text
                        example: Forgot password verification was created ‚ú®.
                          Check you email address
        '400':
          description: token was expired
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      error:
                        type: text
                        example:
                          You forgot password verification token has been expired.
                          Create another one!
        '401':
          description: no user with this email
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      statusCode:
                        type: number
                        example: 401
                      error:
                        type: text
                        example: No user with this email
        '409':
          description: create another verification if one has already been created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      statusCode:
                        type: number
                        example: 409
                      error:
                        type: string
                        example:
                          You have already created a forgot password verification.
                          Follow the link which was send on your email

  /auth/forgot-password/{token}:
    get:
      tags:
        - Auth
      summary: validate forgot password token
      responses:
        '200':
          description:
          headers:
            Set-Cookie:
              schema:
                type: string
                example: forgot-password-token=
                  3&263294f3d50849d7608bb57d56f9777a6beed309c7d78723cd24088fe51a5a8aff;
                  HttpOnly
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: object
                        example: null
                      message:
                        type: text
                        example: Forgot password token was verified üçí

        '400':
          description:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      error:
                        type: text
                        example: Invalid forgot password token"

  /auth/update-password:
    patch:
      tags:
        - Auth
      summary: update password
      parameters:
        - in: cookie
          name: forgot-password-token
          type: integer
          example: 3&263294f3d50849d7608bb57d56f9777a6beed309c7d78723cd24088fe51a5a8aff;

      responses:
        '200':
          description: password was update
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: object
                        example: null
                      message:
                        type: text
                        example: Your password has been updatedü§ò
        '400':
          description: No password token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      error:
                        type: text
                        example: No forgot password token

  /verifications/email:
    post:
      tags:
        - Verification
      security:
        - bearerToken: []
      summary: new email verification link
      responses:
        '200':
          description: send another verification link if previous one has expired
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - properties:
                      data:
                        type: object
                        example: null
                      message:
                        type: string
                        example: A new verify link has been created and send on your email! ‚úÖ
        '400':
          description: account already verified
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - properties:
                      error:
                        type: string
                        example: You can't create a new token, because the current one hasn't expired yet
        '401':
          description: invalid or no token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - properties:
                      statusCode:
                        type: number
                        example: 401
                      error:
                        type: object
                        example: No bearer token
        '409':
          description: account can't be verified twice
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - properties:
                      statusCode:
                        type: number
                        example: 409
                      error:
                        type: string
                        example: Your email is already verified

  /verifications/email/{token}:
    get:
      tags:
        - Verification
      summary: verify email address
      parameters:
        - in: path
          name: token
          schema:
            type: string
          required: true

      responses:
        '200':
          description: verification by email address
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - properties:
                      data:
                        type: object
                        example: null
                      message:
                        type: object
                        example: Your email address has been verified! üëç
        '400':
          description: Invalid token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - properties:
                      error:
                        type: object
                        example: Invalid token

  /api/v1/bookmarks:
    get:
      tags:
        - Bookmarks
      security:
        - bearerToken: []
      summary: get my bookmarks
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: the page number

        - in: query
          name: limit
          schema:
            type: integer
          description: the numbers of items to return

      responses:
        '200':
          description: get my bookmarks
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/post'
                      message:
                        type: text
                        example: Here is your bookmarks ü´ë

    post:
      tags:
        - Bookmarks
      security:
        - bearerToken: []
      summary: create bookmark
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                entity:
                  type: string
                  example: post
                  enum: [post]

                entityId:
                  type: number
                  example: 1

      responses:
        '200':
          description: comment was created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: null
                        example: null
                      message:
                        type: string
                        example: You have added entity to yours bookmarks ü•ë

  /api/v1/conversations:
    get:
      tags:
        - Conversations
      security:
        - bearerToken: []
      summary: get converastion list

      responses:
        '200':
          description: get my conversations
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/conversation'
                      message:
                        type: text
                        example: Here is your conversation list üöè

    post:
      tags:
        - Conversations
      security:
        - bearerToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/forms/conversation'
      summary: create covnersation

      responses:
        '200':
          description: conversation was created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/conversation'
                      message:
                        type: text
                        example: You have created a conversation ü¶¥

  /api/v1/conversations/{id}:
    delete:
      tags:
        - Conversations
      security:
        - bearerToken: []
      summary: remove converastion

      responses:
        '200':
          description: conversation was removed
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: boolean
                        example: true
                      message:
                        type: text
                        example: You have removed a conversation üî®

        '404':
          description: converastion doesnt exist
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      statusCode:
                        type: number
                        example: 404
                      error:
                        type: string
                        example: Conversation does not exist üì¨

  /api/v1/files:
    post:
      tags:
        - Files
      security:
        - bearerToken: []
      summary: upload file or files
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/forms/upload_file'

      responses:
        '200':
          description: files have been uploaded
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/file'
                      message:
                        type: text
                        example: Files has been uploaded üê™
        '400':
          description: cannot upload the file
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      error:
                        type: string
                        example: You have not attached the file(s)

    delete:
      tags:
        - Files
      security:
        - bearerToken: []
      summary: remove files
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fileIds:
                  type: array
                  items:
                    type: string
                    example: f9cff196-a251-46ea-8c6b-bc13064b9970

      responses:
        '200':
          description: files have been uploaded
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: object
                        example: null
                      message:
                        type: text
                        example: Files has been uploaded üê™
        '400':
          description: cant uploada file
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      error:
                        type: string
                        example: Invalid ids or no files to remove ü´∑

  /api/v1/friends:
    get:
      tags:
        - Friends
      security:
        - bearerToken: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: the page number

        - in: query
          name: limit
          schema:
            type: integer
          description: the numbers of users to return
      summary: get my friends list

      responses:
        '200':
          description: get count and list of users
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          count:
                            type: number
                            example: 34
                          friends:
                            type: array
                            items:
                              $ref: '#/components/schemas/user_and_profile'
                      message:
                        type: text
                        example: Here are you friends üõ©Ô∏è

  /api/v1/friends/{id}:
    post:
      tags:
        - Friends
      security:
        - bearerToken: []
      summary: create a friend request

      responses:
        '200':
          description: friend request has been created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: object
                        example: null
                      message:
                        type: text
                        example: You have created a friendship request ü´í

        '400':
          description: friend request already exists
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      statusCode:
                        type: number
                        example: 400
                      error:
                        type: string
                        example: You or your friend already created friendship request ü¶è

        '404':
          description: user hasn't been found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      statusCode:
                        type: number
                        example: 404
                      error:
                        type: string
                        example: User does not exist üîç

    delete:
      tags:
        - Friends
      security:
        - bearerToken: []
      summary: delete a friend

      responses:
        '200':
          description: friend has been removed
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: object
                        example: null
                      message:
                        type: text
                        example: You removed a friend from your friends list üéÉ

        '403':
          description: user hasn't been found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      statusCode:
                        type: number
                        example: 403
                      error:
                        type: string
                        example: You can not follow on yourself üö´

        '404':
          description: user hasn't been found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      statusCode:
                        type: number
                        example: 404
                      error:
                        type: string
                        example: Friendship has not been founded ü•õ

  /api/v1/friends/{id}/approve:
    post:
      tags:
        - Friends
      security:
        - bearerToken: []
      summary: add friend to list

      responses:
        '200':
          description: friendship has been approved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: object
                        example: null
                      message:
                        type: text
                        example: You have approved a friend üñêÔ∏è

        '400':
          description: user hasn't been found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      statusCode:
                        type: number
                        example: 400
                      error:
                        type: string
                        example: You are already friends üßÄ

        '403':
          description: user hasn't been found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      statusCode:
                        type: number
                        example: 403
                      error:
                        type: string
                        example: You can not follow on yourself üö´

  /api/v1/friends/requests:
    get:
      tags:
        - Friends
      security:
        - bearerToken: []
      summary: get friend requests

      responses:
        '200':
          description: income friend applications
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/user_and_profile'
                      message:
                        type: text
                        example: Your friends requests üóûÔ∏è

  /api/v1/friends/requests/my:
    get:
      tags:
        - Friends
      security:
        - bearerToken: []
      summary: get sent friend requests

      responses:
        '200':
          description: my sent friend applications
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/user_and_profile'
                      message:
                        type: text
                        example: There are your requests üçï

  /api/v1/posts:
    get:
      tags:
        - Posts
      security:
        - bearerToken: []
      summary: get posts
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: the page number

        - in: query
          name: limit
          schema:
            type: integer
          description: the numbers of items to return

      responses:
        '200':
          description: get posts
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/post'
                      message:
                        type: text
                        example: Here is your posts üåΩüåΩ
    post:
      tags:
        - Posts
      security:
        - bearerToken: []
      summary: create post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/forms/post'

      responses:
        '200':
          description: post created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/post'
                      message:
                        type: text
                        example: Post has been created ‚úâÔ∏è

  /api/v1/posts/{id}:
    get:
      tags:
        - Posts
      security:
        - bearerToken: []
      summary: get post by id

      responses:
        '200':
          description: get post
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/post'
                      message:
                        type: text
                        example: Here is your post üåΩ

        '404':
          description: post hasn't been found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      statusCode:
                        type: number
                        example: 404
                      error:
                        type: string
                        example: Post doesn't exist

  /api/v1/posts/{id}/like:
    patch:
      tags:
        - Posts
      security:
        - bearerToken: []
      summary: like post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: string
                  example: 1
                  enum: [1, -1]

      responses:
        '200':
          description: like post
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: [boolean, null]
                        example: true
                      message:
                        type: text
                        example: The post has been liked üß¢

        '404':
          description: post hasn't been found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      statusCode:
                        type: number
                        example: 404
                      error:
                        type: string
                        example: Post doesn't exist

  /api/v1/posts/{id}/comments:
    post:
      tags:
        - Posts
      security:
        - bearerToken: []
      summary: create comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/forms/comment'

      responses:
        '200':
          description: comment was created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/comment'
                      message:
                        type: string
                        example: You have commented the post ü•£
        '400':
          description: this username is already taken by someone
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      error:
                        type: string
                        example: Message must contain at least 1 character(s)

  /api/v1/posts/{id}/comments/{cid}:
    put:
      tags:
        - Posts
      security:
        - bearerToken: []
      summary: update comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: updated message

      responses:
        '200':
          description: comment successfully updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: boolean
                        example: true
                      message:
                        type: string
                        example: Your comment has been updated üìé
        '404':
          description: this username is already taken by someone
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      statusCode:
                        type: number
                        example: 404
                      error:
                        type: string
                        example: Comment doesn't exist

    delete:
      tags:
        - Posts
      security:
        - bearerToken: []
      summary: delete comment
      responses:
        '200':
          description: comment successfully deleted
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: boolean
                        example: true
                      message:
                        type: string
                        example: Your comment has been updated üìé

        '404':
          description: comment not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      statusCode:
                        type: number
                        example: 404
                      error:
                        type: string
                        example: Comment doesn't exist

  /api/v1/posts/{id}/comments/{cid}/like:
    patch:
      tags:
        - Posts
      security:
        - bearerToken: []
      summary: like post comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: string
                  example: 1
                  enum: [1, -1]

      responses:
        '200':
          description: like post
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: [boolean, null]
                        example: true
                      message:
                        type: text
                        example: The comment has been liked üçÄ

        '404':
          description: post hasn't been found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      statusCode:
                        type: number
                        example: 404
                      error:
                        type: string
                        example: Comment doesn't exist

  /api/v1/profiles/me:
    put:
      tags:
        - Profile
      security:
        - bearerToken: []
      summary: update user data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/forms/update_profile'

      responses:
        '200':
          description: update profile data
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/user_and_profile'
                      message:
                        type: string
                        example: You profile data has been updated üè°

        '400':
          description: this username is already taken by someone
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      error:
                        type: string
                        example: Username is already taken. Create another one ü•ù

  /api/v1/profiles/phone:
    patch:
      tags:
        - Profile
      security:
        - bearerToken: []
      summary: update user phone
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  example: +38 (097) 777-8899

      responses:
        '200':
          description: update phone number
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: object
                        example: null
                      message:
                        type: string
                        example: You have been sent sms with a verification code
        '400':
          description: this username is already taken by someone
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      error:
                        type: string
                        example: You cant update your phone number while you have a previous phone verification

  /api/v1/profiles/phone/confirm:
    post:
      tags:
        - Profile
      security:
        - bearerToken: []
      summary: confirm changin phone number with otp password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                otp:
                  type: number
                  example: 583450

      responses:
        '200':
          description: phone number was confirmed
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: object
                        example: null
                      error:
                        type: string
                        example: You phone number has been confirmed ‚úÖ
        '400':
          description: wrong otp password
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      error:
                        type: string
                        example: Passwords do not match

  /api/v1/profiles/password:
    patch:
      tags:
        - Profile
      security:
        - bearerToken: []
      summary: update user phone number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/forms/update_password'

      responses:
        '200':
          description: update current password
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: object
                        example: null
                      message:
                        type: text
                        example: Your password has been updated üîí
        '400':
          description: current password do not match
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      error:
                        type: string
                        example: Your new password is the same like current one

  /api/v1/session-tokens:
    get:
      tags:
        - Session tokens
      security:
        - bearerToken: []
      summary: get all my session tokens
      responses:
        '200':
          description: receive list of my tokens
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/sessionToken'
                      message:
                        type: text
                        example: You've received your refresh tokens

        '401':
          description: Token issue
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      statusCode:
                        type: number
                        example: 401
                      error:
                        type: string
                        example: Invalid or no token

    delete:
      tags:
        - Session tokens
      security:
        - bearerToken: []
      summary: revoke all my session tokens except current one
      responses:
        '200':
          description: revoke session tokens
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: object
                        example: null
                      message:
                        type: text
                        example: You tokens has been revoked!

          '401':
            description: bearer token is invalid or expired
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: '#/components/replies/error'
                    - type: object
                      properties:
                        error:
                          type: string
                          example: No bearer token

  /api/v1/session-tokens/{id}:
    delete:
      tags:
        - Session tokens
      security:
        - bearerToken: []
      summary: revoke session token
      responses:
        '200':
          description: revoke token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: object
                        example: null
                      message:
                        type: text
                        example: You token has been revoked!

        '400':
          description: token doesn't exists
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      error:
                        type: string
                        example: Token doesn't exists

  /api/v1/subscriptions/{id}:
    post:
      tags:
        - Subscriptions
      security:
        - bearerToken: []
      summary: create or remove a subscriptions
      responses:
        '200':
          description: subscribe or unsubscribe
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: boolean
                        example: true
                      message:
                        type: text
                        example: You have subscribed to the user üöõ
        '403':
          description: revoke token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      statusCode:
                        type: number
                        example: 403
                      error:
                        type: text
                        example: You can not follow on yourself üö´

  /api/v1/subscriptions/{id}/count:
    get:
      tags:
        - Subscriptions
      security:
        - bearerToken: []
      summary: get user subscription statistic
      responses:
        '200':
          description: user subscription statistic
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          subscribed:
                            type: number
                            example: 38
                          subscribers:
                            type: number
                            example: 15

                      message:
                        type: text
                        example: You have subscribed to the user üöõ

  /api/v1/users:
    get:
      tags:
        - Users
      security:
        - bearerToken: []
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: search key field
      summary: find users by fields

      responses:
        '200':
          description: list of search users
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/user_and_profile'

                      message:
                        type: text
                        example: Founded users ü¶ù

  /api/v1/users/me:
    delete:
      tags:
        - Users
      security:
        - bearerToken: []
      summary: delete my account

      responses:
        '200':
          description: update current password
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: object
                        example: null
                      message:
                        type: text
                        example: Your account has been successfully deleted ü§ó
        '403':
          description: update current password
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/error'
                  - type: object
                    properties:
                      error:
                        type: text
                        example: You have already removed youself ü§ó

  /test:
    get:
      tags:
        - Test
      summary: test server work

      responses:
        '200':
          description: server works
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/replies/ok'
                  - type: object
                    properties:
                      data:
                        type: object
                        example: null
                      message:
                        type: text
                        example: Test works! :)

components:
  securitySchemes:
    bearerToken:
      type: http
      scheme: Bearer
      bearerFormat: JWT

  schemas:
    comment:
      type: object
      properties:
        id:
          type: number
          example: true
        parentId:
          type: number
          nullable: true
          example: 1
        message:
          type: string
          example: my first comment
        createdAt:
          type: date
          example: 2024-06-05T15:02:57.345Z
        updatedAt:
          type: date
          example: 2024-06-05T15:02:57.345Z
        user:
          $ref: '#/components/schemas/user'
        comments:
          type: array
        likes:
          type: number
          example: 5
        dislikes:
          type: number
          example: 2
        isLiked:
          type: boolean
          example: false
        isDisliked:
          type: boolean
          example: true

    conversation:
      type: object
      properties:
        id:
          type: number
          example: 1
        authorId:
          type: number
          example: 16
        userId:
          type: number
          example: 34
        createdAt:
          type: date
          example: 2024-06-05T15:02:57.345Z
        updatedAt:
          type: date
          example: 2024-06-05T15:02:57.345Z
        author:
          $ref: '#/components/schemas/user_and_profile'
        user:
          $ref: '#/components/schemas/user_and_profile'

    file:
      type: object
      properties:
        id:
          type: string
          example: eb38fb08-003f-4ebc-844d-704708eb694b

        userId:
          type: number
          example: 1

        bucketKey:
          type: string
          example: audios/2ebb5b4fb9819436d8d13b63f3c0322e7a36b9b38711c4ef84149123ef2343d5.mp3

        name:
          type: string
          example: Erika - I don't know

        url:
          type: string
          example: https://social-network-files.s3.us-east-1.amazonaws.com/audios/2ebb5b4fb9819436d8d13b63f3c0322e7a36b9b38711c4ef84149123ef2343d5.mp3

        type:
          type: string
          example: audio
          enum: [audio, image, video]

    post:
      type: object
      properties:
        id:
          type: number
          example: 1
        userId:
          type: number
          example: 1
        body:
          type: string
          example: my first post!
        createdAt:
          type: date
          example: 2024-06-05T15:02:57.345Z
        updatedAt:
          type: date
          example: 2024-06-05T15:02:57.345Z
        user:
          $ref: '#/components/schemas/user'
        files:
          type: array
          items:
            $ref: '#/components/schemas/file'
        comments:
          type: array
        likes:
          type: number
          example: 3
        dislikes:
          type: number
          example: 0
        isLiked:
          type: boolean
          example: true
        isDisliked:
          type: boolean
          example: false

    profile:
      type: object
      properties:
        id:
          type: string
          example: a9364570-c50d-4298-90f1-f36325a13471

        userId:
          type: number
          example: 1

        about:
          type: string
          example: aglet lover, grad üß©

        birthday:
          type: [date, null]
          example: 2024-06-05T15:02:57.345Z

        isActive:
          type: boolean
          example: true

        isOfficial:
          type: boolean
          example: false

        isVerified:
          type: boolean
          example: true

        createdAt:
          type: date
          example: 2024-06-05T15:02:57.345Z

        updatedAt:
          type: date
          example: 2024-06-05T15:02:57.345Z

    sessionToken:
      type: object
      properties:
        id:
          type: string
          example: f9b5918d-c501-4bc3-99ab-0a3d8de09e9c
        userId:
          type: number
          example: 1
        browser:
          type: string
          example: firefox
        os:
          type: string
          example: linux
        ip:
          type: string
          example: '172.19.0.1'
        expiredAt:
          type: date
          example: '2024-07-11T12:55:40.509Z'

    user:
      type: object
      properties:
        id:
          type: number
          example: 1
        email:
          type: string
          example: Josh.Haley@hotmail.com
        username:
          type: [string, 'null']
          example: Finn14
        photo:
          type: [string, 'null']
          example: https://i.pinimg.com/736x/e6/82/92/e68292aca045835f376220eeee421c1d.jpg
        firstname:
          type: [string, 'null']
          example: Merritt
        lastname:
          type: [string, 'null']
          example: Bailey
        role:
          type: string
          example: user

    user_and_profile:
      allOf:
        - $ref: '#/components/schemas/user'
        - properties:
            profile:
              $ref: '#/components/schemas/profile'

  forms:
    comment:
      type: object
      properties:
        parentId:
          type: number
          example: 1
          nullable: true
          required: true
        message:
          type: string
          example: my first comment
          required: true

    conversation:
      type: object
      properties:
        userId:
          type: number
          example: 1
          nullable: false
          required: true

    login:
      type: object
      properties:
        email:
          type: string
          example: joshhaley@hotmail.com
        password:
          type: string
          example: password2024
        rememberMe:
          type: boolean
          example: true

    post:
      type: object
      properties:
        body:
          type: string
          example: my fist post
          required: true
        files:
          type: array
          items:
            $ref: '#/components/schemas/file'

    signup:
      type: object
      properties:
        email:
          type: string
          example: joshhaley@hotmail.com
        password:
          type: string
          example: password2024
        confirmPassword:
          type: boolean
          example: password2024

    update_password:
      type: object
      properties:
        currentPassword:
          type: string
          example: 12345678current
        password:
          type: string
          example: 12345678new
        confirmPassword:
          type: string
          example: 12345678new

    update_profile:
      type: object
      properties:
        about:
          type: [string, 'null']
          example: +38 (097) 777-8899
        birthday:
          type: [string, 'null']
          example: null
        username:
          type: [string, 'null']
          example: carlsagan

    upload_file:
      type: object
      properties:
        type:
          description: type of files
          type: type
          example: audio
          enum: [audio, image, video]
          required: true
        files:
          description: array of files
          type: array
          items: file
          required: true

  replies:
    ok:
      type: object
      properties:
        success:
          type: boolean
          example: true
        statusCode:
          type: number
          example: 200

    error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        statusCode:
          type: number
          example: 400
        error:
          type: string
          example: 'Some text...'
